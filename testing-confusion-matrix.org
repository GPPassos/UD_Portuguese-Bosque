
#+name:tb
| 2-noun-r  |
| 1-noun-r  |
| 6-verb-r  |
| 1-propn-r |
| 2-noun-l  |
| 3-verb-r  |
| 2-verb-r  |
| 1-verb-r  |
| root      |
| 1-noun-r  |
| 2-verb-l  |
| 3-verb-l  |

#+BEGIN_SRC elisp  :var dados=tb
(mapcar (lambda (a) (list (car a) (car a))) dados)
#+END_SRC

#+name:tb-2
| 2-noun-r  | 2-noun-r  |
| 1-noun-r  | 1-noun-r  |
| 6-verb-r  | 6-verb-r  |
| 1-propn-r | 1-propn-r |
| 2-noun-l  | 2-noun-l  |
| 3-verb-r  | 3-noun-l  |
| 2-verb-r  | 2-verb-r  |
| 1-verb-r  | 1-verb-r  |
| root      | root      |
| 1-noun-r  | 1-noun-r  |
| 2-verb-l  | 2-verb-l  |
| 3-verb-l  | 3-verb-l  |

#+BEGIN_SRC R :var dados=tb-2 :results output
table(dados)
#+END_SRC

#+RESULTS:
#+begin_example
           V2
V1          1-noun-r 1-propn-r 1-verb-r 2-noun-l 2-noun-r 2-verb-l 2-verb-r 3-noun-l 3-verb-l 6-verb-r root
  1-noun-r         2         0        0        0        0        0        0        0        0        0    0
  1-propn-r        0         1        0        0        0        0        0        0        0        0    0
  1-verb-r         0         0        1        0        0        0        0        0        0        0    0
  2-noun-l         0         0        0        1        0        0        0        0        0        0    0
  2-noun-r         0         0        0        0        1        0        0        0        0        0    0
  2-verb-l         0         0        0        0        0        1        0        0        0        0    0
  2-verb-r         0         0        0        0        0        0        1        0        0        0    0
  3-verb-l         0         0        0        0        0        0        0        0        1        0    0
  3-verb-r         0         0        0        0        0        0        0        1        0        0    0
  6-verb-r         0         0        0        0        0        0        0        0        0        1    0
  root             0         0        0        0        0        0        0        0        0        0    1
#+end_example

